<?php
/**
 * @file
 * Tealium Tag Cloud module for RMG.
 */

define('TEALIUM_TOKEN_TYPE', 'tealium_tokens');
define('TEALIUM_URL', '//tags.tiqcdn.com');

// A global require because the helper function will be used site wide.
module_load_include('inc', 'tealium', '/helpers/tealium');

/**
 * Implements hook_menu().
 */
function tealium_menu() {
  $items = array();

  $items['admin/config/tealium'] = array(
    'title' => 'Tealium',
    'description' => 'Tealium configuration settings.',
    'access arguments' => array('configure tealium'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tealium_admin'),
    'file' => 'admin/tealium.admin.inc',
  );

  return $items;
}

/**
 * Save Tealium tags in key/value store with Request scope.
 *
 * Appends new values to existing keys by default.
 *
 * @param string $key
 *   Tealium tag key. e.g.: s.events
 * @param mixed $value
 *   String, JSON-encoded string, or array of strings.
 * @param bool $overwrite
 *   If TRUE, overwrite existing values with new values.
 *
 * @throws Exception
 *   If $key is not set.
 */
function tealium_set_tag($key, $value, $overwrite = FALSE) {
  // Tidy up the tag_key.
  $key = filter_xss(trim($key));
  if (empty($key)) {
    watchdog(
      'tealium',
      '@function called with an empty key',
      array('@function' => __FUNCTION__),
      WATCHDOG_ERROR
    );
    throw new TealiumException('Key required');
  }

  // If the string is JSON, decode it.
  // (This is for modules that set JSON-encoded strings on panels).
  if (is_string($value)) {
    $decoded_value = json_decode($value);
    if (json_last_error() == JSON_ERROR_NONE) {
      $value = $decoded_value;
    }
  }

  // Tidy up the tag value.
  if (!is_array($value)) {
    $value = array($value);
  }
  $value = array_map('trim', $value);

  // Only filter values that are not in the list.
  // For security reasons, do not add tags that could be modified by a user's
  // input in that list.
  $no_filter_xss_array = variable_get('tealium_no_filter_xss_list', array());
  if (!in_array($key, $no_filter_xss_array)) {
    $value = array_map('filter_xss', $value);
  }


  // Save tag(s) to Singleton, so we can pick them up in the theme layer.
  $manager = TealiumTagManager::getInstance();

  foreach ($value as $v) {
    $manager->add($key, $v, $overwrite);
  }
}

/**
 * Save Tealium tags in key/array store with Request scope.
 *
 * Add new array of values to the tealium store. Note this has
 * different behaviour than tealium_set_tag() that it will overwrite
 * any existing values. This is because it would be an illegal format.
 *
 * @param string $key
 *   Tealium tag key. e.g.: s.events
 * @param array $value
 *   Array of strings.
 *
 * @throws Exception
 *   If $key is not set.
 */
function tealium_set_array_tag($key, $value) {
  // Tidy up the tag_key.
  $key = filter_xss(trim($key));
  if (empty($key)) {
    watchdog(
      'tealium',
      '@function called with an empty key',
      array('@function' => __FUNCTION__),
      WATCHDOG_ERROR
    );
    throw new TealiumException('Key required');
  }

  $value = array_map('trim', $value);

  // Only filter values that are not in the list.
  // For security reasons, do not add tags that could be modified by a user's
  // input in that list.
  $no_filter_xss_array = variable_get('tealium_no_filter_xss_list', array());
  if (!in_array($key, $no_filter_xss_array)) {
    $value = array_map('filter_xss', $value);
  }

  $manager = TealiumTagManager::getInstance();
  $manager->addArray($key, $value);
}

/**
 * Get the Tealium tags as a JSON string.
 *
 * @param bool $json_encode
 *  Default to TRUE. Will use drupal drupal_json_encode if true.
 *  Will format the result by itself if false, which means the values
 *  and keys won't have any of their chars replaced or encoded.
 *
 * @return string
 *   Json-encoded array of tags.
 */
function tealium_get_tags($json_encode = TRUE) {
  $tealium_tag_manager = TealiumTagManager::getInstance();

  $values = $tealium_tag_manager->getAll();
  foreach ($values as $k => $v) {
    // If we have a single value array it will mean
    // we are handling a standard assignment of a
    // value to a tag. Otherwise we are handling
    // an array of values.
    if (count($v) > 1) {
      $values[$k] = $v;
    }
    else {
      $values[$k] = implode(',', $v);
    }
  }

  if ($json_encode) {
    $encoded = drupal_json_encode($values);
  }
  else {
    // Format by hand but without replacing any char.
    // Inspired by drupal_json_encode_helper.
    // Example of otherwise replaced char: '\' by '\/'.
    $output = array();
    foreach ($values as $key => $value) {
      // Firstly we handle an instance of a inner array.
      if (is_array($value)) {
        $inner_array = array();
        foreach ($value as $key_inner => $value_inner) {
         $inner_array[] = '"' . strval($key_inner) . '":"' . $value_inner . '"';
        }
        $output[] = '"' . strval($key) . '":' . '{' . implode(', ', $inner_array) . '}';
      }
      else {
        $output[] = '"' . strval($key) . '":"' . $value . '"';
      }
    }

    $encoded = '{' . implode(', ', $output) . '}';
  }

  return $encoded;
}

/**
 * Implements hook_permission().
 */
function tealium_permission() {
  return array(
    'configure tealium' => array(
      'title' => t('Configure Tealium'),
      'description' => t("Allows the user to change the Tealium module's configuration."),
    ),
  );
}


/**
 * Encapsulate here all the "Tealium enabled" related stuff and return the js.
 *
 * @return string
 *   Return the library url.
 */
function tealium_build_utag_js() {
  // Default return value.
  $js_lib = '';
  // Tealium Variables.
  $tealium_enabled = variable_get('tealium_enabled', TRUE);
  $account = variable_get('tealium_account', '');
  $profile = variable_get('tealium_profile', '');
  $env = variable_get('tealium_environment', '');
  // Tags url to cdn.
  $tealium_script = TEALIUM_URL . "/utag/$account/$profile/$env/utag.js";

  // If we don't have Tealium profile settings or it is not enabled, do nothing.
  if ($tealium_enabled && !empty($account) && !empty($profile) && !empty($env)) {
    // Tags url to cdn.
    $js_lib = $tealium_script;

  }

  return $js_lib;
}

/**
 * Implements hook_js_alter().
 *
 * Latest place we can add the Tealium tags to the page.
 */
function tealium_js_alter(&$javascript) {
  $tealium_script = tealium_build_utag_js();
  // If tealium is enabled.
  if ($tealium_script != '') {
  // Fire all the hook-defined tags.
    foreach (module_invoke_all('tealium_tags') as $tag_name => $tag_value) {
      try {
        tealium_set_tag($tag_name, $tag_value);
      }
      catch (Exception $exception) {
        watchdog_exception('tealium', $exception);
      }
    }
    $scope = variable_get('tealium_javascript_scope_theme', '');
    if (empty($scope)) {
      $scope = variable_get('tealium_javascript_scope', 'footer');
    }
    // Inject tags into page.
    $javascript[] = array(
      'type' => 'inline',
      'group' => 0,
      'every_page' => FALSE,
      'weight' => 0.025,
      'scope' => $scope,
      'cache' => TRUE,
      'defer' => FALSE,
      'preprocess' => TRUE,
      'version' => NULL,
      'data' => 'var utag_data = ' . tealium_get_tags(FALSE),
    );
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Add the Tealium script to the page.
 */
function tealium_preprocess_page(&$vars) {
  $sync = variable_get('tealium_javascript_async_mode', 0);

  // In tealium_preprocess_region().
  $scope = variable_get('tealium_javascript_scope_theme', '');
  if (empty($scope)) {
    $scope = variable_get('tealium_javascript_scope', 'footer');
  }

  $tealium_script = tealium_build_utag_js();
  // If tealium is enabled.
  if ($tealium_script != '') {
    // Tealium JS Fix (no idea what this is for).
    drupal_add_js(
      'if (typeof(window.s) === "undefined") {window.s = new Object;}',
      array('type' => 'inline', 'scope' => $scope)
    );

    // Add the script in the admin-selected region.
    switch ($sync) {
      // Asynchronous: load our own script, that loads the external script
      // on document.ready.
      case 1:
        $settings = array(
          'tealium' => array(
            'tealium_script' => $tealium_script,
            array('type' => 'inline', 'scope' => 'footer')),
        );
        drupal_add_js($settings, 'setting', array('scope' => $scope));
        drupal_add_js(
          drupal_get_path('module', 'tealium') . '/theme/js/async.js',
          array('type' => 'file', 'scope' => $scope)
        );
        break;

      // Synchronous, load external script straight into page.
      case 0:
      default:
        drupal_add_js(
          $tealium_script,
          array('type' => 'external', 'scope' => $scope)
        );
        break;
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Add tealium_record_errors() to the #validate
 * array of the form.
 */
function tealium_form_alter(&$form, &$form_state, $form_id) {
  // If Tealium is enabled.
  if (variable_get('tealium_enabled', TRUE)) {
    // Add Tealium handler to the form.
    $form['#validate'][] = 'tealium_record_errors';
  }
}

/**
 * Catch form errors and store them to be sent to Tealium.
 *
 * This function is appended to the #validate arrays of all
 * Drupal forms by tealium_form_alter().
 */
function tealium_record_errors($form, &$form_state) {
  $form_errors = form_get_errors();

  if (!empty($form_errors)) {
    $form_errors = array_map('strip_tags', $form_errors);
    $form_errors = array_map('trim', $form_errors);

    try {
      tealium_set_tag('pageErrorType', 'Field Validation');

      // Do not override already set error messages.
      $manager = TealiumTagManager::getInstance();
      $tag_value = $manager->get('pageErrorMessage');
      // If the tag is empty, we don't want to do anything else to that one.
      if (empty($tag_value)) {
        if (sizeof($form_errors) > 1){
          $page_errors = array();
          // Action for multiple errors on that page.
          foreach ($form_errors as $index => $form_error) {
            if (!empty($form_error)) {
              $page_errors[$index] = $form_error;
            }
          }
          tealium_set_array_tag('pageErrorMessage', $page_errors);
        }
        else {
          // Action for one single error.
          tealium_set_tag('pageErrorMessage', $form_errors[key($form_errors)]);
        }
      }
    }
    catch (Exception $exception) {
      watchdog_exception('tealium', $exception);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Attach the Javascript stored in tealium_preprocess_page()
 * to the beginning of an arbitrary template region.
 */
function tealium_preprocess_region(&$vars) {
  // Region names of (header|footer) collide with drupal_add_js()'s
  // (header|footer) labels.
  $scope_theme = variable_get('tealium_javascript_scope_theme', '');
  if (!empty($scope_theme) && $scope_theme != 'footer' && $scope_theme != 'header'
    && $vars['region'] == $scope_theme) {

    // Inject Tealium javascript into page.
    $javascript = drupal_get_js($vars['region']);
    $vars['content'] = $javascript . $vars['content'];
  }

}


/**
 * Implements hook_ctools_plugin_directory().
 */
function tealium_ctools_plugin_directory($module, $plugin) {
  if ($module == 'page_manager' || $module == 'panels' || $module == 'ctools') {
    return "plugins/$plugin";
  }
}


/**
 * Implements hook_token_info().
 */
function tealium_token_info() {

  $types[TEALIUM_TOKEN_TYPE] = array(
    'name' => t("Tealium Tokens"),
    'description' => t("Tokens for Tealium."),
  );

  // Tealium specific tokens.
  $tealium_tokens['tealium_pagename'] = array(
    'name' => t("Tealium Page Name"),
    'description' => t("The current page name of the App."),
  );

  // Tealium specific tokens.
  $tealium_tokens['tealium_page_app_name'] = array(
    'name' => t("Tealium Page Name"),
    'description' => t("The current page Application Name of the App."),
  );

  // Tealium specific tokens.
  $tealium_tokens['tealium_app_step'] = array(
    'name' => t("Tealium App Step"),
    'description' => t("The current {app}.step of the App."),
  );

  return array(
    'types' => $types,
    'tokens' => array(
      TEALIUM_TOKEN_TYPE => $tealium_tokens,
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function tealium_tokens($type, $tokens, array $data = array(), array $options = array()) {
  global $user;

  $replacements = array();

  if ($type == TEALIUM_TOKEN_TYPE and !empty($tokens)) {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'tealium_pagename':
          // Initial token, empty by default.
          $replacements[$original] = tealium_token('tealium_pagename');
          break;

        case 'tealium_page_app_name':
          // Initial token, empty by default.
          $replacements[$original] = tealium_token('tealium_page_app_name');
          break;

        case 'tealium_app_step':
          // Initial token, empty by default.
          $replacements[$original] = tealium_token('tealium_app_step');
          break;
      }
    }
  }

  return $replacements;
}



/**
 * Helper function to get and set tokens on content plugins.
 *
 * @param string $token_key
 *   Token Key.
 * @param string|bool $token_value
 *   Token Value (optional).
 *
 * @return array
 *   Return the token value of the given token.
 */
function tealium_token($token_key, $token_value = FALSE) {
  // Define static token array so we can collect token value per request.
  static $pfw_tokens = array();

  if ($token_value) {
    if (empty($token_key) == FALSE) {
      // Just store the token in the static array.
      $pfw_tokens[$token_key] = $token_value;
    }
  }
  else {
    if (empty($token_key) == FALSE && isset($pfw_tokens[$token_key])) {
      return $pfw_tokens[$token_key];
    }
    else {
      return '';
    }
  }

  // Return all the array (list of tokens functionality).
  return $pfw_tokens;
}
